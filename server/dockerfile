# syntax=docker/dockerfile:1.7
FROM golang:1.22-alpine AS build
WORKDIR /src
RUN apk add --no-cache git ca-certificates
COPY go.mod go.sum ./
RUN --mount=type=cache,target=/go/pkg/mod go mod download
COPY . .
RUN --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -trimpath -ldflags="-s -w" -o /out/server .

FROM alpine:3.20
RUN addgroup -S app && adduser -S -G app -u 10001 app \
  && mkdir -p /data /run/secrets \
  && chown -R app:app /data /run/secrets
WORKDIR /
COPY --from=build /out/server /server

ENV STORAGE_PATH=/data \
    TOKENS_PATH=/run/secrets/tokens.txt \
    PORT=1244 \
    GIN_MODE=release \
    MAX_MULTIPART_MB=8

EXPOSE 1244
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD wget -qO- http://127.0.0.1:1244/healthz || exit 1

VOLUME ["/data", "/run/secrets"]
USER app
ENTRYPOINT ["/server"]